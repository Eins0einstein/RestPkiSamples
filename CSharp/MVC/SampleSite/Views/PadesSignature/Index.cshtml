@using Lacuna.RestPki.SampleSite.Models
@model PadesSignatureModel

<h2>PAdES Signature</h2>

<form id="signForm" method="POST">

	@* render the token in a hidden input field *@
	@Html.HiddenFor(m => m.Token)

	<div class="form-group">
		<label>File to sign</label>
		@if (!String.IsNullOrEmpty(Model.UserFile)) {
			<p>You'll be signing <a href='/Download/File/@Model.UserFile'>this document</a>.</p>
		} else {
			<p>You'll be signing <a href='/Download/Sample'>this sample document</a>.</p>
		}
	</div>

	@* Render a select (combo box) to list the user's certificates. For now it will be empty, we'll populate it later on (see javascript below). *@
	<div class="form-group">
		<label for="certificateSelect">Choose a certificate</label>
		<select id="certificateSelect" class="form-control"></select>
	</div>

	@*
		Action buttons. Notice that the "Sign File" button is NOT a submit button. When the user clicks the button,
		we must first use the Web PKI component to perform the client-side computation necessary and only when
		that computation is finished we'll submit the form programmatically (see javascript below).
	*@
	<button id="signButton" type="button" class="btn btn-primary">Sign File</button>
	<button id="refreshButton" type="button" class="btn btn-default">Refresh Certificates</button>

</form>

@section Scripts {

	@*
		The file below contains the JS lib for accessing the Web PKI component. For more information, see:
		https://webpki.lacunasoftware.com/#/Documentation
	*@
	<script src="@Url.Content("~/Content/js/lacuna-web-pki-2.5.0.js")"></script>

	<script>

		// Render then token obtained from REST PKI in a javascript variable
		var token = '@Model.Token';

		// Create an instance of the LacunaWebPKI object
		var pki = new LacunaWebPKI(_webPkiLicense);

		// -------------------------------------------------------------------------------------------------
		// Function called once the page is loaded
		// -------------------------------------------------------------------------------------------------
		function init() {

			// Wireup of button clicks
			$('#signButton').click(sign);
			$('#refreshButton').click(refresh);

			// Block the UI while we get things ready
			$.blockUI();

			// Call the init() method on the LacunaWebPKI object, passing a callback for when
			// the component is ready to be used and another to be called when an error occurrs
			// on any of the subsequent operations. For more information, see:
			// https://webpki.lacunasoftware.com/#/Documentation#coding-the-first-lines
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_init
			pki.init({
				ready: loadCertificates, // as soon as the component is ready we'll load the certificates
				defaultError: onWebPkiError, // generic error callback on Content/js/app/site.js
				restPkiUrl: _restPkiEndpoint
			});
		}

		// -------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Refresh" button
		// -------------------------------------------------------------------------------------------------
		function refresh() {
			// Block the UI while we load the certificates
			$.blockUI();
			// Invoke the loading of the certificates
			loadCertificates();
		}

		// -------------------------------------------------------------------------------------------------
		// Function that loads the certificates, either on startup or when the user
		// clicks the "Refresh" button. At this point, the UI is already blocked.
		// -------------------------------------------------------------------------------------------------
		function loadCertificates() {

			// Call the listCertificates() method to list the user's certificates. For more information see
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_listCertificates
			pki.listCertificates({

				// specify that expired certificates should be ignored
				filter: pki.filters.isWithinValidity,

				// in order to list only certificates within validity period and having a CPF (ICP-Brasil), use this instead:
				//filter: pki.filters.all(pki.filters.hasPkiBrazilCpf, pki.filters.isWithinValidity),

				// id of the select to be populated with the certificates
				selectId: 'certificateSelect',

				// function that will be called to get the text that should be displayed for each option
				selectOptionFormatter: function (cert) {
					return cert.subjectName + ' (issued by ' + cert.issuerName + ')';
				}

			}).success(function () {

				// once the certificates have been listed, unblock the UI
				$.unblockUI();

			});
		}

		// -------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Sign" button
		// -------------------------------------------------------------------------------------------------
		function sign() {

			// Block the UI while we perform the signature
			$.blockUI();

			// Get the thumbprint of the selected certificate
			var selectedCertThumbprint = $('#certificateSelect').val();

			// Call signWithRestPki() on the Web PKI component passing the token received from REST PKI and the certificate
			// selected by the user.
			pki.signWithRestPki({
				token: token,
				thumbprint: selectedCertThumbprint
			}).success(function () {
				// Once the operation is completed, we submit the form
				$('#signForm').submit();
			});
		}

		// Schedule the init function to be called once the page is loaded
		$(document).ready(init);

	</script>
}
