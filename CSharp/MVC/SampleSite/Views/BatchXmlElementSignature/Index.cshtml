@using Lacuna.RestPki.SampleSite.Models
@using Newtonsoft.Json
@model BatchXmlElementModel
<h2>Batch of XML Element Signatures on the Same Document</h2>

<div id="signatureResult" class="form-group" style="display: none;">
    <h3>File signed successfully!</h3>

    <label for="actions">Actions:</label>
    <ul id="actions">
        <li><a id="signedFileLink">Download the signed file</a></li>
        <li><a id="openSignatureLink">Open/validate the signed file</a></li>
    </ul>
</div>

<form id="signForm" method="POST">

	<div class="form-group">
		<label>File to sign</label>
		<p>You are signing a batch of nodes of <a href='/Download/Manifesto'>this sample XML</a>.</p>
	</div>

	@* 
        Render a select (combo box) to list the user's certificates. For now it will be empty, we'll populate
        it later on (see batch-xml-element-signature-form.js).
    *@
	<div class="form-group">
		<label for="certificateSelect">Choose a certificate</label>
		<select id="certificateSelect" class="form-control"></select>
	</div>

	@*
		Action buttons. Notice that the "Sign Batch" button is NOT a submit button. When the user clicks the
        button, we must first use the Web PKI component to perform the client-side computation necessary and
        only when that computation is finished we'll submit the form programmatically
        (see batch-xml-element-signature-form.js).
	*@
	<button id="signButton" type="button" class="btn btn-primary">Sign Batch</button>
	<button id="refreshButton" type="button" class="btn btn-default">Refresh Certificates</button>

</form>

@section Scripts {

	@*
		The file below contains the JS lib for accessing the Web PKI component. For more information, see:
		https://webpki.lacunasoftware.com/#/Documentation
	*@
	<script src="@Url.Content("~/Content/js/lacuna-web-pki-2.9.0.js")"></script>

    @* 
        The file below contains the logic for calling the Web PKI component. It is only an example, feel free
        to alter it to meet your application's needs. You can also bring the code into the javascript block
        below if you prefer.
    *@
    <script src="@Url.Content("~/Content/js/batch-xml-element-signature-form.js")"></script>
    <script>
        $(document).ready(function () {
            // Once the page is ready, we call the init() function on the javascript code
            // (see batch-xml-element-signature-form.js).
            batchXmlElementSignatureForm.init({
                elementIds: @Html.Raw(JsonConvert.SerializeObject(Model.ElementIds)), // The elements IDs of the document.
                certificateSelect: $('#certificateSelect'),           // The <select> element (combo box) to list the certificates.
                docList: $('#docList'),                               // The <ul> element that holds the batch's documents.
                refreshButton: $('#refreshButton'),                   // The "refresh" button.
                signButton: $('#signButton'),                         // The button that initiates the operation.
            });
        });

    </script>
}
